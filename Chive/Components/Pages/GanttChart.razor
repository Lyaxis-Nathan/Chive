@page "/Gantt"
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Chive.Data
@using static Chive.Data.SprintManagmentModel

<SfGantt @ref="Gantt" TreeColumnIndex="0" DataSource="@TaskCollection?.ToList()" RowHeight="40" TaskbarHeight="20" ScrollToTaskbarOnClick="true" EnablePredecessorValidation="false" EnableAdaptiveUI="@AdaptiveUI" RenderBaseline="true" Toolbar="@(new List<Object>() { "Cancel", "Update", "Delete", "Edit", "CollapseAll", "ExpandAll" })" ViewType="ViewType.ResourceView">
    <GanttTaskFields Id="Id" Name="Subject" StartDate="StartTime" EndDate="EndTime" Progress="Progress" ParentId="ParentId" Dependency="Predecessor" BaselineStartDate="StartTime" BaselineEndDate="EndTime">
    </GanttTaskFields>
    <GanttResource DataSource="SprintManagmentModel.ResourcesCollection" Id="ResourceId" Name="ResourceName" TValue="SprintManagmentModel.TaskInfoModel" TResources="SprintManagmentModel.ResourceInfoModel"></GanttResource>
    <GanttAssignmentFields DataSource="AssignmentCollection" PrimaryKey="PrimaryId" TaskID="TaskId" ResourceID="ResourceId" Units="Unit" TValue="SprintManagmentModel.TaskInfoModel" TAssignment="SprintManagmentModel.AssignmentModel">
    </GanttAssignmentFields>
    <GanttColumns>
        <GanttColumn Field="Id" Visible=false></GanttColumn>
        <GanttColumn Field="Subject" HeaderText="Subject" Width="200px" ClipMode="Syncfusion.Blazor.Grids.ClipMode.EllipsisWithTooltip"></GanttColumn>
        <GanttColumn Field="StartTime" HeaderText="Start Date" Width="150px"></GanttColumn>
        <GanttColumn Field="EndTime" HeaderText="End Date" Width="150px"></GanttColumn>
        <GanttColumn Field="Progress" HeaderText="Progress" Width="150px"></GanttColumn>
        <GanttColumn Field="Priority" HeaderText="Priority" Width="150px" EditType="EditType.DropDownEdit"></GanttColumn>
        <GanttColumn Field="Status" HeaderText="Status" Width="150px" EditType="EditType.DropDownEdit"></GanttColumn>
        <GanttColumn Field="Predecessor" HeaderText="Dependency" Width="150px"></GanttColumn>
    </GanttColumns>
    <GanttSplitterSettings Position="40%"></GanttSplitterSettings>
    <GanttTemplates TValue="SprintManagmentModel.TaskInfoModel">
        <TaskbarTemplate>
            @{
                var task = context as TaskInfoModel;
                var taskModel = GetTaskModelData(task);
                var progresswidth = taskModel.ProgressWidth;
                switch (task.Status)
                {
                    case "In Progress":
                        <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div" style="height:15px; background-color: rgba(222, 204, 251, 0.5);outline-color: rgb(201, 167, 244); border-radius:4px">
                            <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="height:10px;background-color: rgba(222, 204, 251, 1);border-radius:0; width:@(progresswidth+"px")"></div>
                        </div>
                        break;
                    case "Open":
                        <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div" style="height:15px; background-color: rgba(203, 228, 252, 1);outline-color: rgb(194, 220, 240); border-radius:4px">
                            <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="height:10px;background-color: rgba(203, 228, 252, 1);border-radius:0; width:@(progresswidth+"px")"></div>
                        </div>
                        break;
                    case "Testing":
                        <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div" style="height:15px;  background-color: rgba(254, 234, 192, 0.5);outline-color: rgb(244, 218, 168); border-radius:4px">
                            <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="height:10px;background-color: rgba(254, 234, 192, 1);border-radius:0; width:@(progresswidth+"px")"></div>
                        </div>
                        break;
                    case "Done":
                        <div class="e-gantt-child-taskbar e-gantt-child-taskbar-inner-div" style="height:15px; background-color: rgba(204, 234, 189, 1);outline-color: rgb(182, 214, 171); border-radius:4px">
                            <div class="e-gantt-child-progressbar-inner-div e-gantt-child-progressbar" style="height:10px;background-color: rgba(204, 234, 189, 1);border-radius:0; width:@(progresswidth+"px")"></div>
                        </div>
                        break;
                }
            }
        </TaskbarTemplate>
    </GanttTemplates>
    <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" AllowTaskbarEditing="true" Mode="Syncfusion.Blazor.Gantt.EditMode.Dialog"></GanttEditSettings>
    <GanttEvents RowDeleting="RowDeletingHandler" RowUpdated="RowUpdatedHandler" TaskbarEdited="TaskbarEdited" QueryChartRowInfo="QueryChartRowInfoHandler" RowDataBound="RowDataBoundHandler" TValue="SprintManagmentModel.TaskInfoModel"></GanttEvents>
</SfGantt>
@code {
    public SfGantt<TaskInfoModel>? Gantt;
    [Parameter]
    public List<TaskInfoModel>? TaskCollection { get; set; }
    [Parameter]
    public List<AssignmentModel>? AssignmentCollection { get; set; }
    [Parameter]
    public EventCallback<SprintModel> onGanttDataSourceChange { get; set; }
    [Inject]
    SyncfusionBlazorService? SyncfusionService { get; set; }
    private bool AdaptiveUI { get; set; } = false;
    private IGanttTaskModel<TaskInfoModel> GetTaskModelData(TaskInfoModel data)
    {
        return Gantt.GetRowTaskModel(data);
    }

    public void RowDeletingHandler(RowDeletingEventArgs<TaskInfoModel> args)
    {
        args.Cancel = true;
        var records = Gantt.GetSelectedRecordsAsync();
        TaskCollection.Remove(records.Result[0]);
    }
    public void RowDataBoundHandler(RowDataBoundEventArgs<TaskInfoModel> args)
    {
        if (args.Data.Id == -1)
        {
            args.Row.AddClass(new string[] { "unassigned" });
        }
        // Add this block to highlight summary tasks
        if (TaskCollection.Any(t => t.ParentId == args.Data.Id))
        {
            args.Row.AddClass(new string[] { "summary-task" });
        }
    }
    public void QueryChartRowInfoHandler(QueryChartRowInfoEventArgs<TaskInfoModel> args)
    {
        if (args.Data.Id == -1)
        {
            args.Row.AddClass(new string[] { "unassigned" });
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (SyncfusionService != null)
            {
                bool Device = await SyncfusionService.IsDevice();
                if (Device)
                {
                    AdaptiveUI = true;
                    if (Gantt != null)
                        await Gantt.RefreshAsync();
                }
            }
        }
    }
    public void TaskbarEdited(TaskbarEditedEventArgs<SprintManagmentModel.TaskInfoModel> args)
    {
        if (args.Data != null)
        {
            switch (args.Data.Progress)
            {
                case 100:
                    args.Data.Status = "Done";
                    break;
                case 0:
                    args.Data.Status = "Open";
                    break;
                default:
                    if (args.Data.Progress < 100 && args.Data.Progress > 0)
                    {
                        args.Data.Status = "In Progress";
                    }
                    break;
            }
        }
    }

    public void RowUpdatedHandler(GanttRowUpdatedEventArgs<SprintManagmentModel.TaskInfoModel> args)
    {
        if (args.Data != null)
        {
            if (args.Data.Progress == 100)
            {
                args.Data.Status = "Done";
            }
            if (args.Data.Progress != 0 && args.Data.Status == "Open")
            {
                args.Data.Progress = 0;
            }
            if (args.Data.Progress < 100 && args.Data.Status == "Done")
            {
                args.Data.Progress = 100;
            }
            if (args.Data.Progress == 0 && args.Data.Status != "Open")
            {
                args.Data.Status = "Open";
            }

            List<SprintManagmentModel.ResourceInfoModel> record = Gantt.GetResources<SprintManagmentModel.ResourceInfoModel>(args.Data);
            if (record != null)
            {
                args.Data.Assignee = record[0].ResourceName;
            }
            switch (args.Data.Assignee)
            {
                case "Martin Tamer":
                    args.Data.ClassName = "e-martintamer";
                    break;
                case "Rose Fuller":
                    args.Data.ClassName = "e-rosefuller";
                    break;
                case "Margaret Buchanan":
                    args.Data.ClassName = "e-margaretbuchanan";
                    break;
                case "Fuller King":
                    args.Data.ClassName = "e-fullerking";
                    break;
                case "Davolio Fuller":
                    args.Data.ClassName = "e-davoliofuller";
                    break;
            }
        }
        var projectCollection = new SprintManagmentModel.SprintModel { ProjectCollection = TaskCollection, ResourceAssignmentCollection = AssignmentCollection };
        onGanttDataSourceChange.InvokeAsync(projectCollection);
    }


}
<style>
    .e-gantt {
        overflow-y: auto;
        height: 100% !important;
        max-height: 100% !important;
        width: 100% !important;
    }

    @@media only screen and (max-width: 700px) {
        .e-gantt-dialog {
            z-index: 1008 !important;
            height: 100%;
        }
    }

    .unassigned {
        display: none !important;
    }
</style>